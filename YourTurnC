{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"15ikgdGLw0vSlOhCAYcCJalEP6nm5OXq9","timestamp":1668117032101},{"file_id":"1PGipChTI0TXC2lihb79cYHMts-t5TzhO","timestamp":1668021185730},{"file_id":"1lSjbOUunyT2r2qYP4P1GpD0jTsqlYXIs","timestamp":1668007902224},{"file_id":"1DYhe4gRIu70xz4hRCBriIkSZHnDmpWpn","timestamp":1667869907360},{"file_id":"1ROGTgq0XazLGz18s6xi8bReQturDlYgE","timestamp":1667415691220}],"collapsed_sections":["hL77L3Uei59o","DXYJtv62Evcx","yP5jgxO8C2ba"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#Set-Up"],"metadata":{"id":"hL77L3Uei59o"}},{"cell_type":"code","source":["#Copy-and-paste the code below to use as \"set-up\" when your optimization model uses Pyomo. \n","#Uncomment the appropriate solver that you need.\n","#for reference, see https://colab.research.google.com/drive/1yGk8RB5NXrcx9f1Tb-oCiWzbxh61hZLI?usp=sharing\n","\n","#installing and importing pyomo\n","!pip install -q pyomo\n","from pyomo.environ import *\n","\n","###installing and importing specific solvers (uncomment the one(s) you need)\n","###glpk\n","!apt-get install -y -qq glpk-utils\n","###cbc\n","#!apt-get install -y -qq coinor-cbc\n","###ipopt\n","#!wget -N -q \"https://ampl.com/dl/open/ipopt/ipopt-linux64.zip\"\n","#!unzip -o -q ipopt-linux64\n","###bonmin\n","#!wget -N -q \"https://ampl.com/dl/open/bonmin/bonmin-linux64.zip\"\n","#!unzip -o -q bonmin-linux64\n","###couenne\n","#!wget -N -q \"https://ampl.com/dl/open/couenne/couenne-linux64.zip\"\n","#!unzip -o -q couenne-linux64\n","###geocode\n","#!wget -N -q \"https://ampl.com/dl/open/gecode/gecode-linux64.zip\"\n","#!unzip -o -q gecode-linux64\n","\n","#Using the solvers:\n","#SolverFactory('glpk', executable='/usr/bin/glpsol')\n","#SolverFactory('cbc', executable='/usr/bin/cbc')\n","#SolverFactory('ipopt', executable='/content/ipopt')\n","#SolverFactory('bonmin', executable='/content/bonmin')\n","#SolverFactory('couenne', executable='/content/couenne')\n","#SolverFactory('gecode', executable='/content/gecode')"],"metadata":{"id":"T3OEUrcJgiSR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668117721991,"user_tz":360,"elapsed":22340,"user":{"displayName":"Brecht Van Buggenhout","userId":"04187530947306155552"}},"outputId":"d637b9f4-7fa6-4e9f-df9d-c5ac28003697"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[K     |████████████████████████████████| 9.7 MB 4.0 MB/s \n","\u001b[K     |████████████████████████████████| 49 kB 4.7 MB/s \n","\u001b[?25hSelecting previously unselected package libsuitesparseconfig5:amd64.\n","(Reading database ... 123942 files and directories currently installed.)\n","Preparing to unpack .../libsuitesparseconfig5_1%3a5.1.2-2_amd64.deb ...\n","Unpacking libsuitesparseconfig5:amd64 (1:5.1.2-2) ...\n","Selecting previously unselected package libamd2:amd64.\n","Preparing to unpack .../libamd2_1%3a5.1.2-2_amd64.deb ...\n","Unpacking libamd2:amd64 (1:5.1.2-2) ...\n","Selecting previously unselected package libcolamd2:amd64.\n","Preparing to unpack .../libcolamd2_1%3a5.1.2-2_amd64.deb ...\n","Unpacking libcolamd2:amd64 (1:5.1.2-2) ...\n","Selecting previously unselected package libglpk40:amd64.\n","Preparing to unpack .../libglpk40_4.65-1_amd64.deb ...\n","Unpacking libglpk40:amd64 (4.65-1) ...\n","Selecting previously unselected package glpk-utils.\n","Preparing to unpack .../glpk-utils_4.65-1_amd64.deb ...\n","Unpacking glpk-utils (4.65-1) ...\n","Setting up libsuitesparseconfig5:amd64 (1:5.1.2-2) ...\n","Setting up libcolamd2:amd64 (1:5.1.2-2) ...\n","Setting up libamd2:amd64 (1:5.1.2-2) ...\n","Setting up libglpk40:amd64 (4.65-1) ...\n","Setting up glpk-utils (4.65-1) ...\n","Processing triggers for libc-bin (2.27-3ubuntu1.6) ...\n","Processing triggers for man-db (2.8.3-2ubuntu0.1) ...\n"]}]},{"cell_type":"code","source":["import pandas as pd"],"metadata":{"id":"J4lPdDkN49x3","executionInfo":{"status":"ok","timestamp":1668117331967,"user_tz":360,"elapsed":2034,"user":{"displayName":"Brecht Van Buggenhout","userId":"04187530947306155552"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["#Review/Demo: Pyomo with Lists"],"metadata":{"id":"DXYJtv62Evcx"}},{"cell_type":"markdown","source":["##05_async Participation Question Solution\n","\n"],"metadata":{"id":"Es1WJgGQBt3D"}},{"cell_type":"code","source":["#Minimize 5*x1 + 2*x2 + 8*x3 + 7x4  \n","#such that \n","#          x2 + 2*x3 + 3*x4  >= 4\n","# 4*x1 + 2*x2 - 3*x3 + 9*x4  >= 7\n","# 2*x1 - 1*x2 + 2*x3 + 1*x4  >= 4\n","# x1, x2, x3, x4 >= 0\n","# x1, x2, x3, x4 <= 20\n"],"metadata":{"id":"88Wa1vkDBt3I","executionInfo":{"status":"ok","timestamp":1668117725128,"user_tz":360,"elapsed":44,"user":{"displayName":"Brecht Van Buggenhout","userId":"04187530947306155552"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["#utilize lists to write things in a more scalable way\n","num_dvs = 4\n","obj_coef = [5, 2, 8, 7]\n","c1_coef = [0, 1, 2, 3]\n","c2_coef = [4, 2, -3, 9]\n","c3_coef = [2, -1, 2, 1]\n","c1_rhs = 4\n","c2_rhs = 7\n","c3_rhs = 4"],"metadata":{"id":"Cs-n4ICp7bFP","executionInfo":{"status":"ok","timestamp":1668117725129,"user_tz":360,"elapsed":42,"user":{"displayName":"Brecht Van Buggenhout","userId":"04187530947306155552"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["#initialize a \"Concrete Model\"\n","model = ConcreteModel()\n","\n","#initialize DVs\n","model.x = Var(range(num_dvs), bounds = (0,20))\n","\n","#define the objective\n","model.Objective = Objective(expr = sum(obj_coef[i]*model.x[i] for i in range(num_dvs)), sense = minimize)\n","\n","#specify the constraints\n","model.Constraint1 = Constraint(expr = sum(c1_coef[i]*model.x[i] for i in range(num_dvs)) >= c1_rhs)\n","model.Constraint2 = Constraint(expr = sum(c2_coef[i]*model.x[i] for i in range(num_dvs)) >= c2_rhs)\n","model.Constraint3 = Constraint(expr = sum(c3_coef[i]*model.x[i] for i in range(num_dvs)) >= c3_rhs)\n","\n","#(Optional) You can use model.pprint() to see what you've done so far\n","model.pprint()"],"metadata":{"id":"nrnPfECgBt3I","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668117725129,"user_tz":360,"elapsed":40,"user":{"displayName":"Brecht Van Buggenhout","userId":"04187530947306155552"}},"outputId":"9efd0b37-40f9-4ec6-e990-9f300f1bef62"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["1 Set Declarations\n","    x_index : Size=1, Index=None, Ordered=Insertion\n","        Key  : Dimen : Domain : Size : Members\n","        None :     1 :    Any :    4 : {0, 1, 2, 3}\n","\n","1 Var Declarations\n","    x : Size=4, Index=x_index\n","        Key : Lower : Value : Upper : Fixed : Stale : Domain\n","          0 :     0 :  None :    20 : False :  True :  Reals\n","          1 :     0 :  None :    20 : False :  True :  Reals\n","          2 :     0 :  None :    20 : False :  True :  Reals\n","          3 :     0 :  None :    20 : False :  True :  Reals\n","\n","1 Objective Declarations\n","    Objective : Size=1, Index=None, Active=True\n","        Key  : Active : Sense    : Expression\n","        None :   True : minimize : 5*x[0] + 2*x[1] + 8*x[2] + 7*x[3]\n","\n","3 Constraint Declarations\n","    Constraint1 : Size=1, Index=None, Active=True\n","        Key  : Lower : Body                   : Upper : Active\n","        None :   4.0 : x[1] + 2*x[2] + 3*x[3] :  +Inf :   True\n","    Constraint2 : Size=1, Index=None, Active=True\n","        Key  : Lower : Body                              : Upper : Active\n","        None :   7.0 : 4*x[0] + 2*x[1] - 3*x[2] + 9*x[3] :  +Inf :   True\n","    Constraint3 : Size=1, Index=None, Active=True\n","        Key  : Lower : Body                          : Upper : Active\n","        None :   4.0 : 2*x[0] - x[1] + 2*x[2] + x[3] :  +Inf :   True\n","\n","6 Declarations: x_index x Objective Constraint1 Constraint2 Constraint3\n"]}]},{"cell_type":"code","source":["#solve model\n","opt = SolverFactory('glpk', executable='/usr/bin/glpsol')\n","\n","results = opt.solve(model, tee = True) "],"metadata":{"id":"bK1kz-U0Bt3J","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668117725130,"user_tz":360,"elapsed":35,"user":{"displayName":"Brecht Van Buggenhout","userId":"04187530947306155552"}},"outputId":"689e4b79-6182-4f61-c324-e59499ef014c"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["GLPSOL: GLPK LP/MIP Solver, v4.65\n","Parameter(s) specified in the command line:\n"," --write /tmp/tmp9uay47jm.glpk.raw --wglp /tmp/tmp4ia_ch6o.glpk.glp --cpxlp\n"," /tmp/tmp8muau1xb.pyomo.lp\n","Reading problem data from '/tmp/tmp8muau1xb.pyomo.lp'...\n","4 rows, 5 columns, 12 non-zeros\n","40 lines were read\n","Writing problem data to '/tmp/tmp4ia_ch6o.glpk.glp'...\n","36 lines were written\n","GLPK Simplex Optimizer, v4.65\n","4 rows, 5 columns, 12 non-zeros\n","Preprocessing...\n","3 rows, 4 columns, 11 non-zeros\n","Scaling...\n"," A: min|aij| =  1.000e+00  max|aij| =  9.000e+00  ratio =  9.000e+00\n","Problem data seem to be well scaled\n","Constructing initial basis...\n","Size of triangular part is 3\n","      0: obj =   0.000000000e+00 inf =   1.500e+01 (3)\n","      3: obj =   1.600000000e+01 inf =   0.000e+00 (0)\n","OPTIMAL LP SOLUTION FOUND\n","Time used:   0.0 secs\n","Memory used: 0.0 Mb (40424 bytes)\n","Writing basic solution to '/tmp/tmp9uay47jm.glpk.raw'...\n","18 lines were written\n"]}]},{"cell_type":"code","source":["#print relevant values\n","for i in range(num_dvs):\n","  print(f\"x{i} = {model.x[i]()}\")\n","print(\"obj* = \", model.Objective())"],"metadata":{"id":"BKeYGi2MBt3J","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668117725131,"user_tz":360,"elapsed":33,"user":{"displayName":"Brecht Van Buggenhout","userId":"04187530947306155552"}},"outputId":"5a8ac9ba-b6ed-4f72-e8f9-777b5ada0faa"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["x0 = 0.742857142857143\n","x1 = 0.0\n","x2 = 0.885714285714286\n","x3 = 0.742857142857143\n","obj* =  16.000000000000004\n"]}]},{"cell_type":"markdown","source":["##05_async Participation Question -- Resolved with ConstraintLists\n","Below, I reprogram the exact same problem as above, but I organize the coefficients into lists and use ConstraintLists() in Pyomo together with a for loop.\n"],"metadata":{"id":"x3nRXlyACQ1x"}},{"cell_type":"code","source":["#Minimize 5*x1 + 2*x2 + 8*x3 + 7x4  \n","#such that \n","#          x2 + 2*x3 + 3*x4  >= 4\n","# 4*x1 + 2*x2 - 3*x3 + 9*x4  >= 7\n","# 2*x1 - 1*x2 + 2*x3 + 1*x4  >= 4\n","# x1, x2, x3, x4 >= 0\n","# x1, x2, x3, x4 <= 20\n"],"metadata":{"id":"OBtEiaDFCQ1x","executionInfo":{"status":"ok","timestamp":1668117744604,"user_tz":360,"elapsed":115,"user":{"displayName":"Brecht Van Buggenhout","userId":"04187530947306155552"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["#utilize lists to write things in a more scalable way\n","num_dvs = 4 #indexed by i\n","num_constraints = 3 #indexed by j\n","obj_coef = [5, 2, 8, 7] #so obj_coef[i] is for dv i\n","c_coef = [[0, 1, 2, 3],[4, 2, -3, 9],[2, -1, 2, 1]] #so c_coef[j][i] is the coefficient for constraint j dv i\n","c_rhs = [4, 7, 4] #so c_rhs[j] is for constraint j\n"],"metadata":{"id":"_OtdlxyZCQ1x","executionInfo":{"status":"ok","timestamp":1668117744979,"user_tz":360,"elapsed":13,"user":{"displayName":"Brecht Van Buggenhout","userId":"04187530947306155552"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["#initialize a \"Concrete Model\"\n","model2 = ConcreteModel()\n","\n","#initialize DVs\n","model2.x = Var(range(num_dvs), bounds = (0,20))\n","\n","#define the objective\n","model2.Objective = Objective(expr = sum(obj_coef[i]*model2.x[i] for i in range(num_dvs)), sense = minimize)\n","\n","#specify the constraints\n","model2.Constraints = ConstraintList()\n","for j in range(num_constraints):\n","  model2.Constraints.add(expr = sum(c_coef[j][i]*model2.x[i] for i in range(num_dvs)) >= c_rhs[j])\n","\n","#(Optional) You can use model.pprint() to see what you've done so far\n","model2.pprint()"],"metadata":{"id":"LbDLzg2cCQ1x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#solve model\n","opt = SolverFactory('glpk', executable='/usr/bin/glpsol')\n","\n","results = opt.solve(model2, tee = True) "],"metadata":{"id":"i2XIGYgxCQ1x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#print relevant values\n","for i in range(num_dvs):\n","  print(f\"x{i} = {model2.x[i]()}\")\n","print(\"obj* = \", model2.Objective())"],"metadata":{"id":"DEACd0rrCQ1x"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Your Turn C: Small Stigler\n","Solve the small version of the Stigler problem shown below using lists, ConstraintLists, and for loops as shown above. (Even though there are only 3 DVs and 2 constraints, this is good practice to prepare yourself for bigger problems). Print out the optimal x's and the total optimal cost.\n","\n","Minimize cost = $.36*x_{wheat} + .141*x_{mac} + .242*x_{cereal}$\n","\n","s.t.\n","\n"," $16.1*x_{wheat} + 1.6*x_{mac} + 2.9*x_{cereal} >= 3$ (Calories Daily Min Constraint)\n","\n"," $507.9*x_{wheat} + 58.9*x_{mac} + 91.2*x_{cereal} >= 1.8$ (Protein Daily Min Constraint)\n","\n","$x_{wheat}, x_{mac}, x_{cereal} >= 0$"],"metadata":{"id":"yP5jgxO8C2ba"}},{"cell_type":"code","source":["#I've started the code for you here...\n","num_commodities = 3\n","num_nutrients = 2\n","cost_coef = [0.36,0.141,0.242]\n","constraint_coef = [[16.1,1.6,2.9],[507.9,58.9,91.2]]\n","daily_mins = [3,1.8]"],"metadata":{"id":"ZWcNsQc9GI9g","executionInfo":{"status":"ok","timestamp":1668119748951,"user_tz":360,"elapsed":131,"user":{"displayName":"Brecht Van Buggenhout","userId":"04187530947306155552"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["model3 = ConcreteModel()\n","\n","#dvs\n","model3.x = Var(range(num_commodities))\n","\n","#objective\n","model3.Objective = Objective( expr = sum(cost_coef[i]*model3.x[i] for i in range(num_commodities)), sense = minimize)\n","\n","#constraints\n","model3.Constraints = ConstraintList()\n","for j in range(num_nutrients):\n","  model3.Constraints.add(expr = sum(constraint_coef[j][i]*model3.x[i] for i in range(num_commodities)) >= daily_mins[j])\n","\n","model3.pprint()"],"metadata":{"id":"NXjPXNEiEnhL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#solve model\n","opt = SolverFactory('glpk', executable='/usr/bin/glpsol')\n","\n","results = opt.solve(model3, tee = True) "],"metadata":{"id":"xTgeZMmAMfaA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#print relevant values\n","for i in range(num_commodities):\n","  print(f\"x{i} = {model3.x[i]()}\")\n","print(\"obj* = \", model3.Objective())"],"metadata":{"id":"KJHqcGoBuIXZ"},"execution_count":null,"outputs":[]}]}